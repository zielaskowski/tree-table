.libPaths()
library(readxl)
library(dplyr)
ipko <- read_excel("Dropbox/prog/R/banki/history_20181114_220211_pko.xls")
library(dbplyr)
library(dblyr)
library(dbplyr)
ipko
library(magrittr)
ipko %>% group_by('Nazwa nadawcy') %>% count()
ipko %>% group_by('Nazwa nadawcy') %>% unique %>% count()
ipko %>% group_by('Nazwa nadawcy') %>% unique
ipko
View(ipko)
View(ipko)
ipko %>% group_by('..14') %>% mutate(count = count)
ipko %>% group_by('..14') %>% mutate(count = count())
ipko %>% group_by('..14') %>% mutate(count = n())
ipko %>% group_by('..14') %>% mutate(count = n()) %>% select('..14', count)
a <- ipko %>% group_by('..14') %>% mutate(count = n())
View(a)
a <- ipko %>% group_by('Ty transakcji') %>% mutate(count = n())
View(a)
a <- ipko %>% group_by(Ty transakcji) %>% mutate(count = n())
Typ
a <- ipko %>% group_by('Typ transakcji') %>% mutate(count = n())
a <- ipko %>% group_by("Typ transakcji") %>% mutate(count = n())
a <- ipko %>% group_by("Typ transakcji") %>% summarise(count = n_distinct("Typ transakcji"))
View(a)
ipko['Typ transakcji']
ipko['Typ transakcji'] %>% summarise(count = n_distinct())
ipko['Typ transakcji'] %>% summarise(count = n_distinct('Typ transakcji'))
ipko['Typ transakcji'] %>% group_by('Typ transakcji') %>% summarise(count = n_distinct('Typ transakcji'))
ipko['Typ transakcji'] %>% group_by('Typ transakcji')
ipko[`Typ transakcji`] %>% group_by(`Typ transakcji`) %>% summarise(count = n_distinct('Typ transakcji'))
ipko[`Typ transakcji`] %>% group_by(`Typ transakcji`) %>% summarise(count = n_distinct(`Typ transakcji`))
ipko[`Typ transakcji`] %>% group_by(`Typ transakcji`)
ipko[2]
ipko[3]
ipko[3] %>% name
ipko[3] %>% colnames()
ipko["Typ transakcji"] %>% colnames()
ipko["Typ transakcji"] %>% group_by("Typ transakcji")
ipko["Typ transakcji"] %>% group_by(`Typ transakcji`)
ipko["Typ transakcji"] %>% group_by(`Typ transakcji`) %>% summarise(count = n_distinct(`Typ transakcji`))
ipko["Typ transakcji"] %>% group_by(`Typ transakcji`) %>% summarise(count = n_distinct("Typ transakcji"))
ipko["Typ transakcji"] %>% group_by(`Typ transakcji`) %>% summarise(count = n("Typ transakcji"))
ipko["Typ transakcji"] %>% group_by(`Typ transakcji`) %>% summarise(count = n())
colnames(ipko)
translate_sql(ipko["Typ transakcji"] %>% group_by(`Typ transakcji`) %>% summarise(count = n()))
translate_sql(ipko["Typ transakcji"] %>% group_by(`Typ transakcji`) %>% summarise(count = n()), window = FALSE)
ipko <- read_excel("Dropbox/prog/R/banki/history_20181114_220211_pko.xls")
library(readxl)
library(dplyr)
library(dbplyr)
library(magrittr)
ipko <- read_excel("Dropbox/prog/R/banki/history_20181114_220211_pko.xls")
a <- ipko %>% group_by("Typ transakcji") %>% summarise(count = n_distinct("Typ transakcji"))
View(a)
ipko["Typ transakcji"] %>% group_by(`Typ transakcji`) %>% summarise(count = n())
install.packages("visNetwork")
library(visNetwork)
nodes <- data.frame(id = 1:5, group = c(rep("A", 2), rep("B", 3)))
edges <- data.frame(from = c(2,5,3,3), to = c(1,2,4,2))
visNetwork(nodes, edges, width = "100%") %>%
visNodes(shape = "square") %>%                        # square for all nodes
visEdges(arrows ="to") %>%                            # arrow "to" for all edges
visGroups(groupname = "A", color = "darkblue") %>%    # darkblue for group "A"
visGroups(groupname = "B", color = "red")             # red for group "B"
try(
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)),
silent = TRUE
)
#minimaze TT_lev.js
#https://developers.google.com/closure/compiler
file.info("./TT_lev.js")
#minimaze TT_lev.js
#https://developers.google.com/closure/compiler
file.info("./TT_lev.js")$mtime
file.info("./TT_lev-min.js")$mtime
#minimaze TT_lev.js
#https://developers.google.com/closure/compiler
file.info("./TT_lev.js")$mtime %>% as.Date()
library(magrittr)
#minimaze TT_lev.js
#https://developers.google.com/closure/compiler
file.info("./TT_lev.js")$mtime %>% as.Date()
file.info("./TT_lev-min.js")$mtime %>% as.Date()
minDate <- file.info("./TT_lev-min.js")$mtime %>% as.Date()
jsDate > minDate
#minimaze TT_lev.js
#https://developers.google.com/closure/compiler
jsDate <- file.info("./TT_lev.js")$mtime %>% as.Date()
minDate <- file.info("./TT_lev-min.js")$mtime %>% as.Date()
jsDate > minDate
jsDate < minDate
library(lubridate)
file.info("./TT_lev.js")$mtime
#minimaze TT_lev.js
#https://developers.google.com/closure/compiler
jsDate <- file.info("./TT_lev.js")$mtime %>% ymd_hms()
jsDate
file.info("./TT_lev.js")$mtime %>% ymd_hms()
minDate <- file.info("./TT_lev-min.js")$mtime %>% ymd_hms()
jsDate < minDate
jsDate > minDate
install.packages("roxygen2")
package.skeleton(name="TT", force = TRUE)
roxygen2::roxygenise(package.dir = "./TT", clean = TRUE)
source('~/Dropbox/prog/R/treetable/build.r')
roxygen2::roxygenise()
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(magrittr)
library(lubridate)
try(
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)),
silent = TRUE
)
#minimaze TT_lev.js
#https://developers.google.com/closure/compiler
jsDate <- file.info("./TT_lev.js")$mtime %>% ymd_hms()
minDate <- file.info("./TT_lev-min.js")$mtime %>% ymd_hms()
if (jsDate > minDate){
library(httr)
js_file <- readLines("./TT_lev.js") %>% paste0(collapse = "\n")
minified <- POST(url = "https://closure-compiler.appspot.com/compile",
body = list(js_code = js_file,
compilation_level="SIMPLE_OPTIMIZATIONS",
output_info="compiled_code",
output_format="text"),
encode = "form",
content_type("application/x-www-form-urlencoded"))
con <- file("./TT_lev-min.js",open="w")
writeLines(content(minified, as="text"), con)
close(con)
}
rm(list=ls())
unlink("./TT/man", recursive=TRUE)
unlink("./TT", recursive=TRUE)
#create package
devtools::create("TT")
library(devtools)
library(cli)
?(cli)
library(devtools)
library(magrittr)
library(lubridate)
library(cli)
library(devtools)
#create package
devtools::create("TT")
here::dr_here()
install.packages("here")
here::dr_here()
#create package
devtools::create("TT")
file.copy(from = "./TT.r", to = "./TT/R/", overwrite = TRUE)
file.copy(from = "./TT.r", to = "./TT/R/", overwrite = TRUE)
# delete old one
unlink("./TT", recursive=TRUE)
#create package
devtools::create("TT")
file.copy(from = "./TT.r", to = "./TT/R/", overwrite = TRUE)
devtools::document()
setwd(9"./TT")
setwd("./TT")
devtools::document()
library(usethis)
use_data()
library(magrittr)
library(lubridate)
library(cli)
library(devtools)
library(usethis)
try(
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)),
silent = TRUE
)
#minimaze TT_lev.js
#https://developers.google.com/closure/compiler
jsDate <- file.info("./TT_lev.js")$mtime %>% ymd_hms()
minDate <- file.info("./TT_lev-min.js")$mtime %>% ymd_hms()
if (jsDate > minDate){
library(httr)
js_file <- readLines("./TT_lev.js") %>% paste0(collapse = "\n")
minified <- POST(url = "https://closure-compiler.appspot.com/compile",
body = list(js_code = js_file,
compilation_level="SIMPLE_OPTIMIZATIONS",
output_info="compiled_code",
output_format="text"),
encode = "form",
content_type("application/x-www-form-urlencoded"))
con <- file("./TT_lev-min.js",open="w")
writeLines(content(minified, as="text"), con)
close(con)
}
rm(list=ls())
# delete old one
unlink("./TT", recursive=TRUE)
source(file = TT.r, local = FALSE)
source(file = "TT.r", local = FALSE)
#create package
devtools::create("TT")
file.copy(from = "./TT.r", to = "./TT/R/", overwrite = TRUE)
setwd("./TT")
use_data(org)
use_data(kw,lev, internal = TRUE)
library(magrittr)
library(lubridate)
library(cli)
library(devtools)
library(usethis)
try(
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)),
silent = TRUE
)
#minimaze TT_lev.js
#https://developers.google.com/closure/compiler
jsDate <- file.info("./TT_lev.js")$mtime %>% ymd_hms()
minDate <- file.info("./TT_lev-min.js")$mtime %>% ymd_hms()
if (jsDate > minDate){
library(httr)
js_file <- readLines("./TT_lev.js") %>% paste0(collapse = "\n")
minified <- POST(url = "https://closure-compiler.appspot.com/compile",
body = list(js_code = js_file,
compilation_level="SIMPLE_OPTIMIZATIONS",
output_info="compiled_code",
output_format="text"),
encode = "form",
content_type("application/x-www-form-urlencoded"))
con <- file("./TT_lev-min.js",open="w")
writeLines(content(minified, as="text"), con)
close(con)
}
rm(list=ls())
#import data
org <- read_csv(file="org.csv") %>%
mutate(data=paste0(year,"-",month)) %>%
select(-year,-month) %>%
pivot_wider(names_from = data, values_from = value, values_fill = list(value=0))
org <- FromDataFrameTable(org,pathName = "org_path", pathDelimiter = "/")
# read js files
kw<-tags$script(readLines("./kolorWheel-min.js", warn = FALSE) %>% paste0(collapse = "") %>% HTML)
lev<-tags$script(readLines("./TT_lev-min.js",warn = FALSE)%>% paste0(collapse = "") %>% HTML())
# delete old one
unlink("./TT", recursive=TRUE)
#create package
devtools::create("TT")
file.copy(from = "./TT.r", to = "./TT/R/", overwrite = TRUE)
setwd("./TT")
use_data(org)
use_data(kw,lev, internal = TRUE)
devtools::document()
browseVignettes("roxygen2")
# file.copy(from = "./man", to = "./TT", recursive = TRUE)
# file.remove("./TT/Read-and-delete-me")
system.file(package = "ggplot")
# file.copy(from = "./man", to = "./TT", recursive = TRUE)
# file.remove("./TT/Read-and-delete-me")
system.file(package = "ggplot2")
setwd("~/Dropbox/prog/R/TT/data-raw")
library(magrittr)
library(lubridate)
#minimaze TT_lev.js
#https://developers.google.com/closure/compiler
jsDate <- file.info("./TT_lev.js")$mtime %>% ymd_hms()
minDate <- file.info("./TT_lev-min.js")$mtime %>% ymd_hms()
minDate
jsDate
jsDate > minDate
is.na(minDate)
is.na(minDate) || jsDate > minDate
library(magrittr)
library(lubridate)
#minimaze TT_lev.js
#https://developers.google.com/closure/compiler
jsDate <- file.info("./TT_lev.js")$mtime %>% ymd_hms()
minDate <- file.info("./TT_lev-min.js")$mtime %>% ymd_hms()
if (is.na(minDate) || jsDate > minDate){
library(httr)
js_file <- readLines("./TT_lev.js") %>% paste0(collapse = "\n")
minified <- POST(url = "https://closure-compiler.appspot.com/compile",
body = list(js_code = js_file,
compilation_level="SIMPLE_OPTIMIZATIONS",
output_info="compiled_code",
output_format="text"),
encode = "form",
content_type("application/x-www-form-urlencoded"))
con <- file("./TT_lev-min.js",open="w")
writeLines(content(minified, as="text"), con)
close(con)
}
rm(list=ls())
# read js files
kw<-tags$script(readLines("./kolorWheel-min.js", warn = FALSE) %>% paste0(collapse = "") %>% HTML)
lev<-tags$script(readLines("./TT_lev-min.js",warn = FALSE)%>% paste0(collapse = "") %>% HTML())
library(htmltools)
